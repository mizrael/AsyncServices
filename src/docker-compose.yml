version: '3.8'

services:
  rabbitmq:        
    image: rabbitmq:3-management-alpine
    restart: always
    environment:
      RABBITMQ_DEFAULT_VHOST: "/"
    ports:     
      - "15671:15671"
      - "15672:15672"   
    networks:
      - infrastructure

  mongodb:
    image: mongo:latest
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: password
    ports:
      - 27017:27017    
    networks:
      - infrastructure    

  api:
    image: ${DOCKER_REGISTRY}asyncservicesapi:latest   
    restart: always
    environment:
      - ASPNETCORE_ENVIRONMENT=Development      
      - DOTNET_ENVIRONMENT=Development
      - ASPNETCORE_URLS=https://+:443;http://+:80
    depends_on:
      - rabbitmq
      - mongodb
    networks:
      - infrastructure    
    ports:
      - 15000:80   
      - 15001:443
    build:
      context: .
      dockerfile: AsyncServices.API/Dockerfile
    volumes:
      - ${APPDATA}/Microsoft/UserSecrets:/root/.microsoft/usersecrets:ro
      - ${APPDATA}/ASP.NET/Https:/root/.aspnet/https:ro

  worker:
    image: ${DOCKER_REGISTRY}asyncservicesworker:latest
    restart: always
    depends_on:
      - rabbitmq
      - mongodb
    environment:
      - ASPNETCORE_ENVIRONMENT=Development      
      - DOTNET_ENVIRONMENT=Development
    deploy:
      mode: replicated
      replicas: 3
    networks:
      - infrastructure    
    build:
      context: .
      dockerfile: AsyncServices.Worker/Dockerfile

  loki:
    image: grafana/loki:master
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - infrastructure

  grafana:
    image: grafana/grafana:master
    ports:
      - "3000:3000"
    networks:
      - infrastructure

networks:
  infrastructure: